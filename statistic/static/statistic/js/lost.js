// Generated by CoffeeScript 1.10.0
(function() {
  var Cell, Column, ConfigTable, LostPageHeader, LostTable, Table, a, div, exports, get_next_day_lost, h3, ref;

  ref = React.DOM, a = ref.a, h3 = ref.h3, div = ref.div;

  Table = React.createFactory(FixedDataTable.Table);

  Column = React.createFactory(FixedDataTable.Column);

  Cell = React.createFactory(FixedDataTable.Cell);

  LostPageHeader = React.createFactory(React.createClass({
    render: function() {
      return div({}, [h3({}, "首次使用时间:" + this.props.date), div({}, "总流失: " + this.props.ratio['total']), div({}, "全失败: " + this.props.ratio["all_fail"] + ", " + (this.props.ratio['all_fail'] / this.props.ratio['total'] * 100) + "%"), div({}, "全成功: " + this.props.ratio['all_success'] + ", " + (this.props.ratio['all_success'] / this.props.ratio['total'] * 100) + "%"), div({}, "全失败中试过QQ/163/126: " + this.props.ratio['all_fail_qq_163'] + ", " + (this.props.ratio['all_fail_qq_163'] / this.props.ratio['all_fail'] * 100) + "%"), div({}, "全成功且只有一个邮箱: " + this.props.ratio['all_success_and_single_mailbox_count'] + ", " + (this.props.ratio['all_success_and_single_mailbox_count'] / this.props.ratio['all_success'] * 100) + "%")]);
    }
  }));

  LostTable = React.createFactory(React.createClass({
    render: function() {
      var all_fail, data, ref1, user;
      data = [];
      ref1 = this.props.lost;
      for (user in ref1) {
        all_fail = ref1[user];
        data.push({
          user: user,
          'all_fail': all_fail,
          'emails': this.props.emails[user]
        });
      }
      return Table({
        rowHeight: 50,
        headerHeight: 50,
        rowsCount: data.length,
        width: 1000,
        height: 500
      }, [
        Column({
          width: 150,
          header: Cell({}, "IMEI (共" + this.props.ratio.total + "人)"),
          cell: (function(props) {
            return Cell(props, div({
              onClick: function() {
                return $.getJSON(config_url, {
                  imei: data[props.rowIndex]['user']
                }, function(response) {
                  return ReactDOM.render(ConfigTable({
                    configs: response.configs
                  }), document.getElementById("config"));
                });
              }
            }, data[props.rowIndex]['user']));
          })
        }), Column({
          width: 200,
          header: Cell({}, "成功添加的邮箱(" + this.props.ratio.all_fail + ", " + (this.props.ratio.all_fail / this.props.ratio.total * 100) + "%)"),
          cell: (function(props) {
            return Cell(props, data[props.rowIndex]['all_fail'] ? '全失败' : '部分失败');
          })
        }), Column({
          width: 650,
          header: Cell({}, 'emails'),
          cell: (function(props) {
            return Cell(props, JSON.stringify(data[props.rowIndex]['emails']));
          })
        })
      ]);
    }
  }));

  ConfigTable = React.createFactory(React.createClass({
    render: function() {
      var configs;
      configs = this.props.configs;
      return Table({
        rowHeight: 50,
        headerHeight: 50,
        rowsCount: this.props.configs.length,
        width: 1500,
        height: 500
      }, [
        Column({
          width: 50,
          header: Cell({}, "success"),
          cell: (function(props) {
            return Cell(props, configs[props.rowIndex]['issuccess'] === 0 ? 'False' : 'True');
          })
        }), Column({
          width: 50,
          header: Cell({}, "autoconfig"),
          cell: (function(props) {
            return Cell(props, configs[props.rowIndex]['isautoconfig'] === 0 ? 'False' : 'True');
          })
        }), Column({
          width: 150,
          header: Cell({}, "imei"),
          cell: (function(props) {
            return Cell(props, configs[props.rowIndex]['imei']);
          })
        }), Column({
          width: 250,
          header: Cell({}, "email"),
          cell: (function(props) {
            return Cell(props, configs[props.rowIndex]['email']);
          })
        }), Column({
          width: 50,
          header: Cell({}, "protocol"),
          cell: (function(props) {
            return Cell(props, configs[props.rowIndex]['protocol'] === 1 ? 'EAS' : (configs[props.rowIndex]['protocol'] === 2 ? "IMAP" : "POP"));
          })
        }), Column({
          width: 250,
          header: Cell({}, 'loginname'),
          cell: (function(props) {
            return Cell(props, configs[props.rowIndex]['loginname']);
          })
        }), Column({
          width: 400,
          header: Cell({}, 'incoming'),
          cell: (function(props) {
            return Cell(props, JSON.stringify(configs[props.rowIndex]['incomingconfig']));
          })
        }), Column({
          width: 400,
          header: Cell({}, 'outgoing'),
          cell: (function(props) {
            return Cell(props, JSON.stringify(configs[props.rowIndex]['outgoingconfig']));
          })
        }), Column({
          width: 200,
          header: Cell({}, "errormessage"),
          cell: (function(props) {
            return Cell(props, configs[props.rowIndex]['errormessage']);
          })
        })
      ]);
    }
  }));

  get_next_day_lost = function() {
    var date, interval_unit;
    date = $('#date_survival').val();
    alert(date);
    interval_unit = $('#interval_unit').val();
    return $.getJSON(url, {
      date: date,
      interval_unit: interval_unit
    }, function(response) {
      ReactDOM.render(LostPageHeader({
        ratio: response.ratio,
        date: date
      }), document.getElementById("header"));
      return ReactDOM.render(LostTable({
        lost: response.lost,
        emails: response.user_emails,
        ratio: response.ratio
      }), document.getElementById("content"));
    });
  };

  exports = this;

  exports.get_next_day_lost = get_next_day_lost;

}).call(this);

//# sourceMappingURL=lost.js.map
